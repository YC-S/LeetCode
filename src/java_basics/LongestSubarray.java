/*
 * Copyright (c) 2020. Yuanchen
 */

package java_basics;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * @author shiyuanchen
 * @project LeetCode
 * @since 2020/09/16
 */
public class LongestSubarray {

  public static int longestSubarray(List<Integer> arr) {
    int i = 0, j = 0, max = 1;
    Set<Integer> set = new HashSet<>();
    for (i = 0; i < arr.size() - 1; i++) {
      set.add(arr.get(i));
      for (j = i + 1; j < arr.size(); j++) {
        if (Math.abs(arr.get(i) - arr.get(j)) < 2) {
          if (!set.contains(arr.get(j))) {
            if (set.size() == 2) {
              break;
            } else {
              set.add(arr.get(j));
            }
          }
        } else {
          break;
        }
      }
      max = Math.max(max, j - i);
      set.clear();
    }
    return max;
  }

  private static boolean isValid(int a, Set<Integer> set) {
    return set.contains(a + 1) || set.contains(a - 1);
  }

  public static void main(String[] args) {
    List<Integer> arr = Arrays
      .asList(149, 195593459, 195593459, 195593458, 195593457, 195593459,
        195593459,
        195593458,
        195593459,
        195593458,
        195593459,
        195593457,
        195593458,
        195593458,
        195593457,
        195593457,
        195593457,
        195593457,
        195593458,
        195593457,
        195593459,
        195593457,
        195593457,
        195593458,
        195593457,
        195593457,
        195593458,
        195593458,
        195593457,
        195593458,
        195593457,
        195593457,
        195593457,
        195593459,
        195593459,
        195593459,
        195593458,
        195593458,
        195593458,
        195593458,
        195593458,
        195593457,
        195593459,
        195593459,
        195593458,
        195593457,
        195593459,
        195593459,
        195593457,
        195593459,
        195593459,
        195593457,
        195593457,
        195593459,
        195593459,
        195593457,
        195593459,
        195593458,
        195593458,
        195593458,
        195593457,
        195593458,
        195593458,
        195593458,
        195593458,
        195593457,
        195593458,
        195593459,
        195593458,
        195593459,
        195593458,
        195593459,
        195593458,
        195593458,
        195593459,
        195593459,
        195593458,
        195593457,
        195593459,
        195593459,
        195593459,
        195593459,
        195593457,
        195593459,
        195593459,
        195593459,
        195593459,
        195593459,
        195593457,
        195593459,
        195593457,
        195593458,
        195593457,
        195593458,
        195593458,
        195593457,
        195593459,
        195593457,
        195593457,
        195593459,
        195593457,
        195593459,
        195593459,
        195593458,
        195593457,
        195593459,
        195593458,
        195593459,
        195593459,
        195593458,
        195593458,
        195593459,
        195593458,
        195593459,
        195593458,
        195593457,
        195593459,
        195593458,
        195593457,
        195593457,
        195593457,
        195593458,
        195593457,
        195593459,
        195593457,
        195593458,
        195593459,
        195593458,
        195593458,
        195593459,
        195593457,
        195593459,
        195593459,
        195593459,
        195593458,
        195593459,
        195593458,
        195593458,
        195593459,
        195593458,
        195593459,
        195593458,
        195593457,
        195593457,
        195593457,
        195593459,
        195593458,
        195593459,
        195593458,
        195593457);
    System.out.println(longestSubarray(arr));
  }
}
