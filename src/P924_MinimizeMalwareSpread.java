// BFS with a list of infected nodes.
// Try removing each one, if the new candidate is (a lower node number and == amount of infected)
// or a less amount of infected then update the resulting answer node.

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class P924_MinimizeMalwareSpread {
    public static int minMalwareSpread(int[][] graph, int[] initial) {
        Arrays.sort(initial);
        Set<Integer> initialSet = new HashSet<>();
        for (int i : initial) initialSet.add(i);

        int max = 0, res = initial[0];
        for (int i : initial) {
            int tmp = bfs(i, i, graph, initialSet, new HashSet<>());
            if (tmp != -1 && tmp > max) {
                max = tmp;
                res = i;
            }
        }
        return res;
    }

    private static int bfs(int cur, int inital, int[][] graph, Set<Integer> initalSet, Set<Integer> visited) {
        if (visited.contains(cur)) return 0;
        int res = 1;
        visited.add(cur);
        for (int i = 0; i < graph[cur].length; i++) {
            if (graph[cur][i] == 1) {
                if (i != inital && initalSet.contains(i))
                    return -1;
                else if (!visited.contains(i)) {
                    int tmp = bfs(i, inital, graph, initalSet, visited);
                    if (tmp == -1) return -1;
                    res += tmp;
                }
            }
        }
        return res;
    }


    public static void main(String[] args) {
        int[][] graph = new int[][]{{1, 1, 0}, {1, 1, 0}, {0, 0, 1}};
        int[] initial = new int[]{0, 1};
        System.out.println(minMalwareSpread(graph, initial));
    }
}